% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/options.R
\docType{data}
\name{roptgen_options}
\alias{roptgen_options}
\title{User-level configuration for roptgen}
\format{
An object of class \code{list} of length 7.
}
\usage{
roptgen_options
}
\description{
Configure roptgen to your liking. Options can be set in any of the following ways:
\enumerate{
\item In \R via \code{options()}, where the name should be \verb{roptgen.<name>}.
\item Via environment variables, replacing the periods in the option name with underscores. For example,
the option 'roptgen.test.dir' becomes the environment variable \code{ROPTGEN_TEST_DIR}.
If both the \R option and environment variable are present, the
\R option takes precedence.
\item Some functions expose arguments which use the value of an option as the default. These can
be overridden when needed.
}

If an invalid option is provided, functions may either fall back to the default or error, presenting
the valid options.

Environment variables may be preferable over \R options since environment variables will also be
available to any child processes. To set these environment variables or \R options across many projects,
consider using an .Rprofile or .Renviron file, as documented in ?.Renviron.
}
\section{Options}{

\itemize{
\item \code{roptgen.object}: The name of the object which the options will be assigned to. Defaults to
"config". It must be a syntactically valid R name.n
\item \code{roptgen.file.in}: The path to the yaml file documenting package options. Defaults to
inst/options.yaml.n
\item \code{roptgen.file.out}: The file path to write the generated code to. Defaults to \code{R/options}. The
extension will be set automatically.n
\item \code{roptgen.inline}: Whether to inline all code which roptgen depends on for reading and validating
options. If \code{TRUE}, the helper file will be the roptgen.file.out option with '-helpers'
appended. The benefit of inlining is you do not need to take a dependency on roptgen (not even
in Suggests!), the drawback, from certain perspectives, is you won't benefit from any bug fixes
in roptgen after you have generated your option file, unless you regenerate it. One day, there
will be an extensive suite of tests, which can also be copied into your project.n
\item \code{roptgen.test}: Whether to copy tests into your package. If your tests are not in the standard
location for the testing framework, or you are not developing a package, also set
"roptgen.test.dir". Defaults to \code{FALSE}, and not copying tests into your package.n
\item \code{roptgen.test.dir}: The directory to copy the tests. Make sure to also set "roptgen.test".n
\item \code{roptgen.test.file}: The file which will contain the tests. It will be overwritten, so do not
include with another set of tests.n
}
}

\keyword{datasets}
