overview:
  documentation: >
    #' @title User-level configuration for `r basename(getwd())`
    #'
    #' @description Configure `r basename(getwd())` to your liking. Options can be set in any of the following ways:
    #'  1. In \R via `options()`, where the name should be `roptgen.<name>`.
    #'
    #'  2. Via environment variables, replacing the periods in the option name with underscores. For example,
    #'      the option 'roptgen.test.dir' becomes the environment variable `ROPTGEN_TEST_DIR`.
    #'      If both the \R option and environment variable are present, the
    #'      \R option takes precedence.
    #'
    #'  3. Some functions expose arguments which use the value of an option as the default. These can
    #'      be overridden when needed.
    #'
    #' If an invalid option is provided, functions may either fall back to the default or error, presenting
    #'   the valid options.
    #'
    #' Environment variables may be preferable over \R options since environment variables will also be
    #'   available to any child processes. To set these environment variables or \R options across many projects,
    #'   consider using an .Rprofile or .Renviron file, as documented in ?.Renviron.
options:
  - name: roptgen.object
    type: !expr character(1L)
    default: !expr function() {paste(basename(getwd()), 'options', sep = '_')}
    check: !expr function(x)
      {if (make.names(x) != x) {stop("Option \"roptgen.object\" must be a syntactically valid R name.")} else TRUE}
    description: >
      The name of the object which the options will be assigned to. Defaults to "config". It must be
      a syntactically valid R name.
  - name: roptgen.file.in
    type: !expr character(1L)
    default: 'inst/options.yaml'
    check: !expr file.exists
    description: >
      The path to the yaml file documenting package options. Defaults to inst/options.yaml.
  - name: roptgen.file.out
    type: !expr character(1L)
    default: !expr file.path("R", 'options')
    check: !expr file.exists
    description: >
      The file path to write the generated code to. Defaults to `R/options`. The extension will be
      set automatically.
  - name: roptgen.inline
    type: !expr c(TRUE, FALSE)
    default: FALSE
    description: >
      Whether to inline all code which roptgen depends on for reading and validating options. If
      `TRUE`, the helper file will be the roptgen.file.out option with '-helpers' appended.
      The benefit of inlining is you do not need to take a dependency on roptgen (not even in Suggests!),
      the drawback, from certain perspectives, is you won't benefit from any bug fixes in
      roptgen after you have generated your option file, unless you regenerate it.
      One day, there will be an extensive suite of tests, which can also be copied into your project.
  - name: roptgen.test
    type: list(FALSE, c("tinytest", "testthat")
    default: FALSE
    description: >
      Whether to copy tests into your package. If your tests are not in the standard location for
      the testing framework, or you are not developing a package, also set "roptgen.test.dir".
      Defaults to `FALSE`, and not copying tests into your package.
  - name: roptgen.test.dir
    type: !expr character(1L)
    default: !expr function() roptgen_test_dir()
    check: !expr dir.exists
    description: >
      The directory to copy the tests. Make sure to also set "roptgen.test".
  - name: roptgen.test.file
    type: !expr character(1L)
    default: "test-roptgen-options.R"
    description: >
      The file which will contain the tests. It will be overwritten, so do not include with another
      set of tests.

